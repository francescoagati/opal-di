{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","tagline":"a dependency injection for opal","name":"Opal-di","body":"A dependency injection for opal ruby inspired to pimple.\r\n\r\n```\r\n\r\n  cont = OpalDI::Container.new\r\n  \r\n  cont.set(:name) { |cnt| \"mario\" }\r\n  cont.set(:surname) {|cnt| \"rossi\" }\r\n  cont.set(:label) {|cnt| \"#{cont.get(:name)} #{cont.get(:surname)}\"  }\r\n  cont.get(:label).should == \"mario rossi\"\r\n\r\n\r\n```\r\n\r\nor use array syntax for  access\r\n\r\n```\r\n  cont[:name]= proc { |cnt| \"mario\" }\r\n  cont[:surname]= ->(cnt) { \"rossi\" }\r\n  cont[:label]= ->(cnt)  {\"#{cont[:name]} #{cont[:surname]}\"  }\r\n  cont[:label].should == \"mario rossi\"\r\n\r\n```\r\n\r\nA service can be also shared. In this case return always an unique instance of the service.\r\n\r\n```\r\n  cont.set(:accumulator, :shared => true) {|cnt|  Accumulator.new }\r\n```\r\n\r\nMulti get\r\n\r\nA container can return many services with a single get\r\n\r\n```\r\n\r\n   name,surname,label = @cont.get([:name,:surname,:label])\r\n    name.should == 'mario'\r\n    surname.should == 'rossi'\r\n    label.should  == 'mario rossi'\r\n\r\n```"}